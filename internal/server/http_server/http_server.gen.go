// Package http_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http_server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ErrorInfo defines model for ErrorInfo.
type ErrorInfo struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// ListMeta defines model for ListMeta.
type ListMeta struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
	Total  int `json:"total"`
}

// TokenCreate defines model for TokenCreate.
type TokenCreate struct {
	LoginId  string `json:"loginId"`
	Password string `json:"password"`
}

// TokenInfo defines model for TokenInfo.
type TokenInfo struct {
	ExpiresAt time.Time `json:"expiresAt"`
	IssuedAt  time.Time `json:"issuedAt"`
	Token     string    `json:"token"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email    string   `json:"email"`
	LoginId  string   `json:"loginId"`
	Password string   `json:"password"`
	Phone    string   `json:"phone"`
	Role     UserRole `json:"role"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Email   string   `json:"email"`
	Id      string   `json:"id"`
	LoginId string   `json:"loginId"`
	Phone   string   `json:"phone"`
	Role    UserRole `json:"role"`
}

// UserInfoList defines model for UserInfoList.
type UserInfoList struct {
	Metadata ListMeta   `json:"metadata"`
	Users    []UserInfo `json:"users"`
}

// UserRole defines model for UserRole.
type UserRole string

// List of UserRole
const (
	UserRole_admin UserRole = "admin"
	UserRole_user  UserRole = "user"
)

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email    string   `json:"email"`
	Password string   `json:"password"`
	Phone    string   `json:"phone"`
	Role     UserRole `json:"role"`
}

// Limit defines model for Limit.
type Limit int

// Offset defines model for Offset.
type Offset int

// UserID defines model for UserID.
type UserID string

// PostTokensJSONBody defines parameters for PostTokens.
type PostTokensJSONBody TokenCreate

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Offset *Offset `json:"Offset,omitempty"`
	Limit  *Limit  `json:"Limit,omitempty"`
}

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody UserCreate

// PutUsersMeJSONBody defines parameters for PutUsersMe.
type PutUsersMeJSONBody UserUpdate

// PutUsersUserIDJSONBody defines parameters for PutUsersUserID.
type PutUsersUserIDJSONBody UserUpdate

// PostTokensJSONRequestBody defines body for PostTokens for application/json ContentType.
type PostTokensJSONRequestBody PostTokensJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// PutUsersMeJSONRequestBody defines body for PutUsersMe for application/json ContentType.
type PutUsersMeJSONRequestBody PutUsersMeJSONBody

// PutUsersUserIDJSONRequestBody defines body for PutUsersUserID for application/json ContentType.
type PutUsersUserIDJSONRequestBody PutUsersUserIDJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /tokens)
	PostTokens(w http.ResponseWriter, r *http.Request)

	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)

	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request)

	// (DELETE /users/me)
	DeleteUsersMe(w http.ResponseWriter, r *http.Request)

	// (GET /users/me)
	GetUsersMe(w http.ResponseWriter, r *http.Request)

	// (PUT /users/me)
	PutUsersMe(w http.ResponseWriter, r *http.Request)

	// (DELETE /users/{UserID})
	DeleteUsersUserID(w http.ResponseWriter, r *http.Request, userID UserID)

	// (GET /users/{UserID})
	GetUsersUserID(w http.ResponseWriter, r *http.Request, userID UserID)

	// (PUT /users/{UserID})
	PutUsersUserID(w http.ResponseWriter, r *http.Request, userID UserID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostTokens operation middleware
func (siw *ServerInterfaceWrapper) PostTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTokens(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "Offset" -------------
	if paramValue := r.URL.Query().Get("Offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "Offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter Offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Limit" -------------
	if paramValue := r.URL.Query().Get("Limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "Limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter Limit: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsers(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteUsersMe operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersMe(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersMe(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutUsersMe operation middleware
func (siw *ServerInterfaceWrapper) PutUsersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUsersMe(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "UserID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "UserID", chi.URLParam(r, "UserID"), &userID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter UserID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersUserID(w, r, userID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "UserID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "UserID", chi.URLParam(r, "UserID"), &userID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter UserID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersUserID(w, r, userID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "UserID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "UserID", chi.URLParam(r, "UserID"), &userID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter UserID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUsersUserID(w, r, userID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tokens", wrapper.PostTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.PostUsers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/me", wrapper.DeleteUsersMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/me", wrapper.PutUsersMe)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{UserID}", wrapper.DeleteUsersUserID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{UserID}", wrapper.GetUsersUserID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{UserID}", wrapper.PutUsersUserID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTXPbNhD9K55tj4yoqnYPPDVNPB3POG0njU8eH1ByJSEhPgIs7Xo8/O+dBSCRikjZ",
	"6kRuY/tmc4H9eG/xFsIdlEZZo1GTh+IOrHBCIaEL/51LJYn/kBoK+Nygu4UMtFAIRTJm4MslKsGrKpyL",
	"piYoTqYZ0K3lVVITLtBB22bw+3zucdRfsvYdKqmlahQUw/4uPLqzt2t/VtCyc5eMGTj83EiHFRTkGuy7",
	"Ty49OakX0LLLaAzFnzpn3Jmem4CLMxYdSQym0lQ44CADhd6LxZCt7SdyGT1066/W9Zm/PmJJ7OtcenqH",
	"JLbD1ytavsQkA7OGeNtGhkQ9ZPoitzoRa1aExI1DOX4wn1C/cSgIB9I0C6nPqkGgrPD+xrjqfqRWXnp7",
	"RjMZZgv/ttKhfx1gmRunBEEBlSB8RVIxDVvpSe8brPbZQRz//mrisl6ArJfeUF3cxmMAoxKyHoT3X0Kf",
	"gV0aPdzaztTB8L3DORTwXd4JR55OTc7Jvud1DyAxeVyFzFI1YxiMUDuKgKz2B+YwtUuutQNg76pZB7Yr",
	"V0iiElEddqW1VpE2g8YnXZeEyj+koIB6u05OOCdutwqMbrMupbFq3icYUbOmX4KolOTDwA56mzrcedOF",
	"rfZs/v+iwfdva/YgU1OXRpMoqVcW+Mb6xp78dDz7ecGfJqVRnGWFvnTSkjQ88rxv7OwT0pFoaHnk0V3L",
	"koPWskTtQzlpHL62olzi0WwyZcAdh1gS2SLPb25uJiJYJ8Yt8rTV5+dnb05/+/P01WwynSxJ1aEPJNW4",
	"I+41Oh8z+2EynUzDRLKohZVQwI/hUxbmdKAwD2oY7x0mNjkzLLg4PqPwh/H0Ia6JcKOnX0x1u8IMddgk",
	"rK1lGbblH70JMtxN+V189udX20ZSvTVcP2+dTadfN1Q8T+0WjwzU8VcM1t1dRoKdPF4wbhux8N30u+JP",
	"+VqMFjjA/K9IF0lW+lfSy+FMuiV5ukW22b0r4/21vTog5xsS/n+g/Xh6/NR7LA4TVvpRSVl11iEUpXdf",
	"O7CgdPP52epJ4notJ7nC+Du0xnhl2OT+bfge2H+HMEzN8z4zO7V4FLOn187PSiebIZlsNjg/jE6mq/24",
	"Tr50waMr6F18N2sfqKO9V7YXLd1DS3fi9qKn37Se7vV7JTUC/wzZKcQbz9kvYvykxbjNwKO7XnXQw558",
	"Nt50Voviq9FV+08AAAD//7QzFDrnGQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
