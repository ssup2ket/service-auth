// Package http_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http_server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ErrorInfo defines model for ErrorInfo.
type ErrorInfo struct {
	Code      string `json:"Code"`
	RequestID string `json:"RequestID"`
}

// ListMeta defines model for ListMeta.
type ListMeta struct {
	Limit  int `json:"Limit"`
	Offset int `json:"Offset"`
	Total  int `json:"Total"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email    string `json:"Email"`
	ID       string `json:"ID"`
	Password string `json:"Password"`
	Phone    string `json:"Phone"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Email string `json:"Email"`
	ID    string `json:"ID"`
	Phone string `json:"Phone"`
	UUID  string `json:"UUID"`
}

// UserInfoList defines model for UserInfoList.
type UserInfoList struct {
	Metadata ListMeta   `json:"Metadata"`
	Users    []UserInfo `json:"Users"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email    string `json:"Email"`
	Password string `json:"Password"`
	Phone    string `json:"Phone"`
	UUID     string `json:"UUID"`
}

// Limit defines model for Limit.
type Limit int

// Offset defines model for Offset.
type Offset int

// UserUUID defines model for UserUUID.
type UserUUID string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Offset *Offset `json:"offset,omitempty"`
	Limit  *Limit  `json:"limit,omitempty"`
}

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody UserCreate

// PutUsersUserUUIDJSONBody defines parameters for PutUsersUserUUID.
type PutUsersUserUUIDJSONBody UserUpdate

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// PutUsersUserUUIDJSONRequestBody defines body for PutUsersUserUUID for application/json ContentType.
type PutUsersUserUUIDJSONRequestBody PutUsersUserUUIDJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)

	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request)

	// (DELETE /users/{UserUUID})
	DeleteUsersUserUUID(w http.ResponseWriter, r *http.Request, userUUID UserUUID)

	// (GET /users/{UserUUID})
	GetUsersUserUUID(w http.ResponseWriter, r *http.Request, userUUID UserUUID)

	// (PUT /users/{UserUUID})
	PutUsersUserUUID(w http.ResponseWriter, r *http.Request, userUUID UserUUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsers(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteUsersUserUUID operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserUUID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "UserUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameter("simple", false, "UserUUID", chi.URLParam(r, "UserUUID"), &userUUID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter UserUUID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersUserUUID(w, r, userUUID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUsersUserUUID operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserUUID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "UserUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameter("simple", false, "UserUUID", chi.URLParam(r, "UserUUID"), &userUUID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter UserUUID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersUserUUID(w, r, userUUID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutUsersUserUUID operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserUUID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "UserUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameter("simple", false, "UserUUID", chi.URLParam(r, "UserUUID"), &userUUID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter UserUUID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUsersUserUUID(w, r, userUUID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.PostUsers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{UserUUID}", wrapper.DeleteUsersUserUUID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{UserUUID}", wrapper.GetUsersUserUUID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{UserUUID}", wrapper.PutUsersUserUUID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/TQBD9K9XAcbFD2iLhE9BGKFKgFZBTlcNiT+Jtbe92PxJFkf872l3bcRqnaVBb",
	"EOXWerxv3sx7ntmsIOa54AUWWkG0AkElzVGjdP+NWM60/YMVEMGtQbkEAgXNESLIXJCAilPMqX0rwSk1",
	"mYbotEdAL4V9ixUaZyihLAlcTKcKd+JxH20D5qxguckh6sYbK5Tj8fC8QRRUp2vAJkxA4q1hEhOItDTY",
	"TlHBKi1ZMYPSwvqga8BASi6HxZS73kguUGqGLnTGE+wAIPANbw0q7WndhW9TufIY7ROTpk7+8xpjbfFG",
	"TOkvqOk2hUaeu71pt3o79oNrmnWF7rAbVQJf1ML4g10cbavPJFKN2ywHOWVZZ6c6W0Tgkiq14DLpDqa8",
	"wP2ddao3QPUxUpHZVUK30ocXsIMjgdqt95OvTOtreDBx65Nt8tY5CfXueS1xChG8CtfffFiZPWxcViG6",
	"w0xjrvadbBpXNuSolHS5XZaDJWtKu6oZi+RAJ/2WZQ6U4wA3WQRWeSnmhaaxUwY9f1BGKCNO3530P8zs",
	"oyDmuaWToIolE5pxO8yUMqJ/g/qIGp0eKZRzFtukGYuxUK6gatB9FDRO8agf9ICAkTZFqrWIwnCxWATU",
	"RQMuZ2F1VIWj4dng6/fBm37QC1KdZ047pjO8J+8cpfLM3ga9oGePcIEFFQwiOHaPiJvATqvQ1Caa+Tlk",
	"haS2tGECEXxGXduhvXKuuq22fiWshlFJ9r7px1c5sWIqwW3dlke/16tlwcIxo0JkLHbcwmtlK1y1FsRD",
	"rO8+Paf6poS2RyePmG+9jnYmO3m+ZKfPV5m1J51Zg4D1FUxKAoKrDmNdctU4S/q9+okny0eVvNp0Zekn",
	"xROb668w1h/VuiTVOAlX9Z2u9PfNDP2e2PTAuXvuXLBxB9wW6mV/QfdO5j2d+/cs/qJm50E7t7GCXabC",
	"dE1d02Gapxm+1eVw9/D9b6PnGsv2tzLKee2ih11fN+6nVLAgueFqfhy8lyYP4hjKSfkrAAD//9jPhS+V",
	"EAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
