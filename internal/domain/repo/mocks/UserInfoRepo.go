// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/ssup2ket/ssup2ket-auth-service/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/ssup2ket/ssup2ket-auth-service/internal/domain/repo"
)

// UserInfoRepo is an autogenerated mock type for the UserInfoRepo type
type UserInfoRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userInfo
func (_m *UserInfoRepo) Create(ctx context.Context, userInfo *model.UserInfo) error {
	ret := _m.Called(ctx, userInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserInfo) error); ok {
		r0 = rf(ctx, userInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, userUUID
func (_m *UserInfoRepo) Delete(ctx context.Context, userUUID string) error {
	ret := _m.Called(ctx, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPrimary provides a mock function with given fields: ctx, uuid
func (_m *UserInfoRepo) GetPrimary(ctx context.Context, uuid string) (*model.UserInfo, error) {
	ret := _m.Called(ctx, uuid)

	var r0 *model.UserInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserInfo); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecondary provides a mock function with given fields: ctx, uuid
func (_m *UserInfoRepo) GetSecondary(ctx context.Context, uuid string) (*model.UserInfo, error) {
	ret := _m.Called(ctx, uuid)

	var r0 *model.UserInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserInfo); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrimary provides a mock function with given fields: ctx, offset, limit
func (_m *UserInfoRepo) ListPrimary(ctx context.Context, offset int, limit int) ([]model.UserInfo, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []model.UserInfo
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []model.UserInfo); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecondary provides a mock function with given fields: ctx, offset, limit
func (_m *UserInfoRepo) ListSecondary(ctx context.Context, offset int, limit int) ([]model.UserInfo, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []model.UserInfo
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []model.UserInfo); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, userInfo
func (_m *UserInfoRepo) UpdateUser(ctx context.Context, userInfo *model.UserInfo) error {
	ret := _m.Called(ctx, userInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserInfo) error); ok {
		r0 = rf(ctx, userInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: tx
func (_m *UserInfoRepo) WithTx(tx *repo.DBTx) repo.UserInfoRepo {
	ret := _m.Called(tx)

	var r0 repo.UserInfoRepo
	if rf, ok := ret.Get(0).(func(*repo.DBTx) repo.UserInfoRepo); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.UserInfoRepo)
		}
	}

	return r0
}
