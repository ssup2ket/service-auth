// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	repo "github.com/ssup2ket/ssup2ket-auth-service/internal/domain/repo"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	testing "testing"
)

// DBTx is an autogenerated mock type for the DBTx type
type DBTx struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *DBTx) Begin() (repo.DBTx, error) {
	ret := _m.Called()

	var r0 repo.DBTx
	if rf, ok := ret.Get(0).(func() repo.DBTx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.DBTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields:
func (_m *DBTx) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTx provides a mock function with given fields:
func (_m *DBTx) GetTx() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *DBTx) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDBTx creates a new instance of DBTx. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBTx(t testing.TB) *DBTx {
	mock := &DBTx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
